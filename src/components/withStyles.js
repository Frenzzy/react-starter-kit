/**
 * React Starter Kit (https://www.reactstarterkit.com/)
 *
 * Copyright Â© 2014-present Kriasoft, LLC. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.txt file in the root directory of this source tree.
 */

import React, { Component, PropTypes } from 'react';

const inserted = {};

/**
 * Insert CSS styles object generated by `css-loader` into DOM
 */
function insertCss({ id, media, cssText }) {
  if (inserted[id]) {
    inserted[id]++;
  } else {
    inserted[id] = 1;
    let elem = document.getElementById(id);
    let create = false;

    if (!elem) {
      create = true;

      elem = document.createElement('style');
      elem.id = id;

      if (media) {
        elem.setAttribute('media', media);
      }
    }

    if ('textContent' in elem) {
      elem.textContent = cssText;
    } else {
      elem.styleSheet.cssText = cssText;
    }

    if (create) {
      document.head.appendChild(elem);
    }
  }

  return id;
}

/**
 * Remove style/link elements for specified node IDs
 * if they are no longer referenced by UI components.
 */
function removeCss(id) {
  if (--inserted[id] <= 0) {
    const elem = document.getElementById(id);
    if (elem) {
      elem.parentNode.removeChild(elem);
    }
  }
}

function getDisplayName(ComposedComponent) {
  return ComposedComponent.displayName || ComposedComponent.name || 'Component';
}

function withStyles(...styles) {
  return (ComposedComponent) => class WithStyles extends Component {
    static contextTypes = {
      insertCss: PropTypes.func,
    };

    static displayName = `WithStyles(${getDisplayName(ComposedComponent)})`;
    static ComposedComponent = ComposedComponent;

    componentWillMount() {
      this.ids = [];
      if (this.context.insertCss) {
        styles.forEach(s => this.context.insertCss(s));
      } else {
        styles.forEach(s => this.ids.push(insertCss(s())));
      }
    }

    componentWillUnmount() {
      if (this.ids.length) {
        window.setTimeout(() => this.ids.forEach(id => removeCss(id)), 0);
      }
    }

    render() {
      return <ComposedComponent {...this.props} />;
    }
  };
}

export default withStyles;
